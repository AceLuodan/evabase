/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NftLimitOrderFlowInterface extends ethers.utils.Interface {
  functions: {
    "_owner()": FunctionFragment;
    "check(bytes)": FunctionFragment;
    "config()": FunctionFragment;
    "create(uint256,bytes)": FunctionFragment;
    "destroy(uint256,bytes)": FunctionFragment;
    "evaSafesFactory()": FunctionFragment;
    "execute(bytes)": FunctionFragment;
    "hashOrder((address,address,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "initialize(address,address,string,string)": FunctionFragment;
    "multicall(bytes)": FunctionFragment;
    "orderExists(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerWalletSafes()": FunctionFragment;
    "pause(uint256,bytes)": FunctionFragment;
    "setFactory()": FunctionFragment;
    "start(uint256,bytes)": FunctionFragment;
    "verifyOrder((address,address,uint256,uint256,uint256,uint256,uint256),bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "check", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "evaSafesFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [
      {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWalletSafes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrder",
    values: [
      {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evaSafesFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWalletSafes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrder",
    data: BytesLike
  ): Result;

  events: {
    "OrderCancel(address,uint256,tuple)": EventFragment;
    "OrderCreated(address,uint256,bytes32,tuple)": EventFragment;
    "OrderExecute(address,tuple,uint256,uint256)": EventFragment;
    "OrderPause(address,uint256,tuple)": EventFragment;
    "OrderStart(address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderStart"): EventFragment;
}

export type OrderCancelEvent = TypedEvent<
  [
    string,
    BigNumber,
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    }
  ] & {
    user: string;
    flowId: BigNumber;
    order: [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    };
  }
>;

export type OrderCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    }
  ] & {
    user: string;
    flowId: BigNumber;
    _byte32: string;
    order: [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    };
  }
>;

export type OrderExecuteEvent = TypedEvent<
  [
    string,
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    },
    BigNumber,
    BigNumber
  ] & {
    user: string;
    order: [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    };
    amount: BigNumber;
    value: BigNumber;
  }
>;

export type OrderPauseEvent = TypedEvent<
  [
    string,
    BigNumber,
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    }
  ] & {
    user: string;
    flowId: BigNumber;
    order: [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    };
  }
>;

export type OrderStartEvent = TypedEvent<
  [
    string,
    BigNumber,
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    }
  ] & {
    user: string;
    flowId: BigNumber;
    order: [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      assetToken: string;
      amount: BigNumber;
      price: BigNumber;
      expireTime: BigNumber;
      tokenId: BigNumber;
      salt: BigNumber;
    };
  }
>;

export class NftLimitOrderFlow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NftLimitOrderFlowInterface;

  functions: {
    _owner(overrides?: CallOverrides): Promise<[string]>;

    check(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { needExecute: boolean; executeData: string }
    >;

    config(overrides?: CallOverrides): Promise<[string]>;

    create(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroy(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    evaSafesFactory(overrides?: CallOverrides): Promise<[string]>;

    execute(
      executeData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _config: string,
      _evaSafesFactory: string,
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    orderExists(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exist: boolean; amount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerWalletSafes(overrides?: CallOverrides): Promise<[string]>;

    pause(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _owner(overrides?: CallOverrides): Promise<string>;

  check(
    checkData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { needExecute: boolean; executeData: string }>;

  config(overrides?: CallOverrides): Promise<string>;

  create(
    flowId: BigNumberish,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroy(
    flowId: BigNumberish,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  evaSafesFactory(overrides?: CallOverrides): Promise<string>;

  execute(
    executeData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashOrder(
    order: {
      owner: string;
      assetToken: string;
      amount: BigNumberish;
      price: BigNumberish;
      expireTime: BigNumberish;
      tokenId: BigNumberish;
      salt: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _config: string,
    _evaSafesFactory: string,
    name: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  orderExists(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { exist: boolean; amount: BigNumber }>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerWalletSafes(overrides?: CallOverrides): Promise<string>;

  pause(
    flowId: BigNumberish,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    flowId: BigNumberish,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyOrder(
    order: {
      owner: string;
      assetToken: string;
      amount: BigNumberish;
      price: BigNumberish;
      expireTime: BigNumberish;
      tokenId: BigNumberish;
      salt: BigNumberish;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _owner(overrides?: CallOverrides): Promise<string>;

    check(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { needExecute: boolean; executeData: string }
    >;

    config(overrides?: CallOverrides): Promise<string>;

    create(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    destroy(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    evaSafesFactory(overrides?: CallOverrides): Promise<string>;

    execute(executeData: BytesLike, overrides?: CallOverrides): Promise<void>;

    hashOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _config: string,
      _evaSafesFactory: string,
      name: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    orderExists(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exist: boolean; amount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerWalletSafes(overrides?: CallOverrides): Promise<string>;

    pause(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(overrides?: CallOverrides): Promise<void>;

    start(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OrderCancel(address,uint256,tuple)"(
      user?: string | null,
      flowId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    OrderCancel(
      user?: string | null,
      flowId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    "OrderCreated(address,uint256,bytes32,tuple)"(
      user?: string | null,
      flowId?: BigNumberish | null,
      _byte32?: null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        _byte32: string;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    OrderCreated(
      user?: string | null,
      flowId?: BigNumberish | null,
      _byte32?: null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        _byte32: string;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    "OrderExecute(address,tuple,uint256,uint256)"(
      user?: string | null,
      order?: null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        user: string;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
        amount: BigNumber;
        value: BigNumber;
      }
    >;

    OrderExecute(
      user?: string | null,
      order?: null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        user: string;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
        amount: BigNumber;
        value: BigNumber;
      }
    >;

    "OrderPause(address,uint256,tuple)"(
      user?: string | null,
      flowId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    OrderPause(
      user?: string | null,
      flowId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    "OrderStart(address,uint256,tuple)"(
      user?: string | null,
      flowId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;

    OrderStart(
      user?: string | null,
      flowId?: BigNumberish | null,
      order?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        }
      ],
      {
        user: string;
        flowId: BigNumber;
        order: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          assetToken: string;
          amount: BigNumber;
          price: BigNumber;
          expireTime: BigNumber;
          tokenId: BigNumber;
          salt: BigNumber;
        };
      }
    >;
  };

  estimateGas: {
    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    check(checkData: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroy(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    evaSafesFactory(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      executeData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _config: string,
      _evaSafesFactory: string,
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    orderExists(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWalletSafes(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    check(
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    evaSafesFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      executeData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _config: string,
      _evaSafesFactory: string,
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    orderExists(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWalletSafes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      flowId: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyOrder(
      order: {
        owner: string;
        assetToken: string;
        amount: BigNumberish;
        price: BigNumberish;
        expireTime: BigNumberish;
        tokenId: BigNumberish;
        salt: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
