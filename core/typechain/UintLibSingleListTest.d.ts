/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UintLibSingleListTestInterface extends ethers.utils.Interface {
  functions: {
    "add1Value(uint256)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "getRange(uint256,uint256)": FunctionFragment;
    "getall()": FunctionFragment;
    "getsize()": FunctionFragment;
    "testMath(uint256,uint256,uint256,uint32)": FunctionFragment;
    "testRemove(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add1Value",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getall", values?: undefined): string;
  encodeFunctionData(functionFragment: "getsize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testMath",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRemove",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add1Value", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getsize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testMath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testRemove", data: BytesLike): Result;

  events: {
    "log(uint256)": EventFragment;
    "log2(bytes32,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log2"): EventFragment;
}

export type logEvent = TypedEvent<[BigNumber] & { data: BigNumber }>;

export type log2Event = TypedEvent<
  [string, number] & { data: string; count: number }
>;

export class UintLibSingleListTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UintLibSingleListTestInterface;

  functions: {
    add1Value(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { arr: BigNumber }>;

    getRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { arr: BigNumber[] }>;

    getall(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { arr: BigNumber[] }>;

    getsize(overrides?: CallOverrides): Promise<[BigNumber]>;

    testMath(
      allVaildSize: BigNumberish,
      keepBotSize: BigNumberish,
      keepbotId: BigNumberish,
      batch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { arr: BigNumber[] }>;

    testRemove(
      a: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add1Value(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get(_count: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getRange(
    fromIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getall(overrides?: CallOverrides): Promise<BigNumber[]>;

  getsize(overrides?: CallOverrides): Promise<BigNumber>;

  testMath(
    allVaildSize: BigNumberish,
    keepBotSize: BigNumberish,
    keepbotId: BigNumberish,
    batch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  testRemove(
    a: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add1Value(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    get(_count: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getall(overrides?: CallOverrides): Promise<BigNumber[]>;

    getsize(overrides?: CallOverrides): Promise<BigNumber>;

    testMath(
      allVaildSize: BigNumberish,
      keepBotSize: BigNumberish,
      keepbotId: BigNumberish,
      batch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    testRemove(a: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "log(uint256)"(
      data?: null
    ): TypedEventFilter<[BigNumber], { data: BigNumber }>;

    log(data?: null): TypedEventFilter<[BigNumber], { data: BigNumber }>;

    "log2(bytes32,uint16)"(
      data?: null,
      count?: null
    ): TypedEventFilter<[string, number], { data: string; count: number }>;

    log2(
      data?: null,
      count?: null
    ): TypedEventFilter<[string, number], { data: string; count: number }>;
  };

  estimateGas: {
    add1Value(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get(_count: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getall(overrides?: CallOverrides): Promise<BigNumber>;

    getsize(overrides?: CallOverrides): Promise<BigNumber>;

    testMath(
      allVaildSize: BigNumberish,
      keepBotSize: BigNumberish,
      keepbotId: BigNumberish,
      batch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testRemove(
      a: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add1Value(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getsize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testMath(
      allVaildSize: BigNumberish,
      keepBotSize: BigNumberish,
      keepbotId: BigNumberish,
      batch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testRemove(
      a: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
