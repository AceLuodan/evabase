/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EvabaseConfigInterface extends ethers.utils.Interface {
  functions: {
    "addBatchKeeper(address[],uint8[])": FunctionFragment;
    "addKeeper(address,uint8)": FunctionFragment;
    "batchFlowNum()": FunctionFragment;
    "control()": FunctionFragment;
    "isActiveControler(address)": FunctionFragment;
    "isKeeper(address)": FunctionFragment;
    "keepBotExists(address)": FunctionFragment;
    "keepBotSizes(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeBatchKeeper(address[])": FunctionFragment;
    "removeKeeper(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBatchFlowNum(uint32)": FunctionFragment;
    "setControl(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBatchKeeper",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addKeeper",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFlowNum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "control", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isActiveControler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "keepBotExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "keepBotSizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeBatchKeeper",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchFlowNum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setControl", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBatchKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchFlowNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "control", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActiveControler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keepBotExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keepBotSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBatchKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchFlowNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setControl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddBatchKeeper(address,address[],uint8[])": EventFragment;
    "AddKeeper(address,address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveBatchKeeper(address,address[])": EventFragment;
    "RemoveKeeper(address,address)": EventFragment;
    "SetBatchFlowNum(address,uint32)": EventFragment;
    "SetControl(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddBatchKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBatchKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBatchFlowNum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetControl"): EventFragment;
}

export type AddBatchKeeperEvent = TypedEvent<
  [string, string[], number[]] & {
    user: string;
    keeper: string[];
    keepNetWork: number[];
  }
>;

export type AddKeeperEvent = TypedEvent<
  [string, string, number] & {
    user: string;
    keeper: string;
    keepNetWork: number;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveBatchKeeperEvent = TypedEvent<
  [string, string[]] & { user: string; keeper: string[] }
>;

export type RemoveKeeperEvent = TypedEvent<
  [string, string] & { user: string; keeper: string }
>;

export type SetBatchFlowNumEvent = TypedEvent<
  [string, number] & { user: string; num: number }
>;

export type SetControlEvent = TypedEvent<
  [string, string] & { user: string; control: string }
>;

export class EvabaseConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EvabaseConfigInterface;

  functions: {
    addBatchKeeper(
      arr: string[],
      keepNetWorks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKeeper(
      _keeper: string,
      keepNetWork: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchFlowNum(overrides?: CallOverrides): Promise<[number]>;

    control(overrides?: CallOverrides): Promise<[string]>;

    isActiveControler(
      add: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKeeper(_query: string, overrides?: CallOverrides): Promise<[boolean]>;

    keepBotExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { isActive: boolean; keepNetWork: number }>;

    keepBotSizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeBatchKeeper(
      arr: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchFlowNum(
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setControl(
      _control: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBatchKeeper(
    arr: string[],
    keepNetWorks: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKeeper(
    _keeper: string,
    keepNetWork: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchFlowNum(overrides?: CallOverrides): Promise<number>;

  control(overrides?: CallOverrides): Promise<string>;

  isActiveControler(add: string, overrides?: CallOverrides): Promise<boolean>;

  isKeeper(_query: string, overrides?: CallOverrides): Promise<boolean>;

  keepBotExists(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { isActive: boolean; keepNetWork: number }>;

  keepBotSizes(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeBatchKeeper(
    arr: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchFlowNum(
    num: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setControl(
    _control: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBatchKeeper(
      arr: string[],
      keepNetWorks: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addKeeper(
      _keeper: string,
      keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchFlowNum(overrides?: CallOverrides): Promise<number>;

    control(overrides?: CallOverrides): Promise<string>;

    isActiveControler(add: string, overrides?: CallOverrides): Promise<boolean>;

    isKeeper(_query: string, overrides?: CallOverrides): Promise<boolean>;

    keepBotExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { isActive: boolean; keepNetWork: number }>;

    keepBotSizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeBatchKeeper(arr: string[], overrides?: CallOverrides): Promise<void>;

    removeKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBatchFlowNum(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setControl(_control: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddBatchKeeper(address,address[],uint8[])"(
      user?: string | null,
      keeper?: null,
      keepNetWork?: null
    ): TypedEventFilter<
      [string, string[], number[]],
      { user: string; keeper: string[]; keepNetWork: number[] }
    >;

    AddBatchKeeper(
      user?: string | null,
      keeper?: null,
      keepNetWork?: null
    ): TypedEventFilter<
      [string, string[], number[]],
      { user: string; keeper: string[]; keepNetWork: number[] }
    >;

    "AddKeeper(address,address,uint8)"(
      user?: string | null,
      keeper?: null,
      keepNetWork?: null
    ): TypedEventFilter<
      [string, string, number],
      { user: string; keeper: string; keepNetWork: number }
    >;

    AddKeeper(
      user?: string | null,
      keeper?: null,
      keepNetWork?: null
    ): TypedEventFilter<
      [string, string, number],
      { user: string; keeper: string; keepNetWork: number }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemoveBatchKeeper(address,address[])"(
      user?: string | null,
      keeper?: null
    ): TypedEventFilter<[string, string[]], { user: string; keeper: string[] }>;

    RemoveBatchKeeper(
      user?: string | null,
      keeper?: null
    ): TypedEventFilter<[string, string[]], { user: string; keeper: string[] }>;

    "RemoveKeeper(address,address)"(
      user?: string | null,
      keeper?: null
    ): TypedEventFilter<[string, string], { user: string; keeper: string }>;

    RemoveKeeper(
      user?: string | null,
      keeper?: null
    ): TypedEventFilter<[string, string], { user: string; keeper: string }>;

    "SetBatchFlowNum(address,uint32)"(
      user?: string | null,
      num?: null
    ): TypedEventFilter<[string, number], { user: string; num: number }>;

    SetBatchFlowNum(
      user?: string | null,
      num?: null
    ): TypedEventFilter<[string, number], { user: string; num: number }>;

    "SetControl(address,address)"(
      user?: string | null,
      control?: null
    ): TypedEventFilter<[string, string], { user: string; control: string }>;

    SetControl(
      user?: string | null,
      control?: null
    ): TypedEventFilter<[string, string], { user: string; control: string }>;
  };

  estimateGas: {
    addBatchKeeper(
      arr: string[],
      keepNetWorks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKeeper(
      _keeper: string,
      keepNetWork: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchFlowNum(overrides?: CallOverrides): Promise<BigNumber>;

    control(overrides?: CallOverrides): Promise<BigNumber>;

    isActiveControler(
      add: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKeeper(_query: string, overrides?: CallOverrides): Promise<BigNumber>;

    keepBotExists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    keepBotSizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeBatchKeeper(
      arr: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchFlowNum(
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setControl(
      _control: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBatchKeeper(
      arr: string[],
      keepNetWorks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKeeper(
      _keeper: string,
      keepNetWork: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchFlowNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    control(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActiveControler(
      add: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeeper(
      _query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepBotExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepBotSizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBatchKeeper(
      arr: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchFlowNum(
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setControl(
      _control: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
