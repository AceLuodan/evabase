/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { IEvaFlowTest, IEvaFlowTestInterface } from "../IEvaFlowTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "checkData",
        type: "bytes",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "needExecute",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "executeData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "flowId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "bytes",
        name: "checkData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "flowId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "destroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "executeData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerWalletSafes",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "flowId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "flowId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "start",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610314806100326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063565a6d8a11610066578063565a6d8a14610098578063631d0c9e146100985780638da5cb5b146100dc578063c64b3bb5146100ed578063fd7230d61461011e57600080fd5b806303dfd47c1461009857806309c5eabe146100ac57806329451959146100ac57806352beaaed146100bd575b600080fd5b6100aa6100a6366004610203565b5050565b005b6100aa6100ba3660046101c8565b50565b335b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b03166100bf565b6101106100fb3660046101c8565b50604080516020810190915260008152600191565b6040516100d3929190610293565b61013461012c366004610203565b606092915050565b6040516100d391906102ae565b600082601f830112610151578081fd5b813567ffffffffffffffff8082111561016c5761016c6102c8565b604051601f8301601f19908116603f01168101908282118183101715610194576101946102c8565b816040528381528660208588010111156101ac578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156101d9578081fd5b813567ffffffffffffffff8111156101ef578182fd5b6101fb84828501610141565b949350505050565b60008060408385031215610215578081fd5b82359150602083013567ffffffffffffffff811115610232578182fd5b61023e85828601610141565b9150509250929050565b60008151808452815b8181101561026d57602081850181015186830182015201610251565b8181111561027e5782602083870101525b50601f01601f19169290920160200192915050565b82151581526040602082015260006101fb6040830184610248565b6020815260006102c16020830184610248565b9392505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f23a3acbbbe64d2db387ab5b3a8bd9448999b395adfeb82f3dbcae5be554024864736f6c63430008040033";

export class IEvaFlowTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IEvaFlowTest> {
    return super.deploy(overrides || {}) as Promise<IEvaFlowTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IEvaFlowTest {
    return super.attach(address) as IEvaFlowTest;
  }
  connect(signer: Signer): IEvaFlowTest__factory {
    return super.connect(signer) as IEvaFlowTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IEvaFlowTestInterface {
    return new utils.Interface(_abi) as IEvaFlowTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEvaFlowTest {
    return new Contract(address, _abi, signerOrProvider) as IEvaFlowTest;
  }
}
