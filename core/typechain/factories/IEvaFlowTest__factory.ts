/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { IEvaFlowTest, IEvaFlowTestInterface } from "../IEvaFlowTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "checkData",
        type: "bytes",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "needExecute",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "executeData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "destroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "executeData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerWalletSafes",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610235806100326000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806309c5eabe14610067578063294519591461006757806352beaaed1461007a57806383197ef0146100995780638da5cb5b146100a0578063c64b3bb5146100b1575b600080fd5b6100786100753660046100e2565b50565b005b335b6040516001600160a01b0390911681526020015b60405180910390f35b6100783080ff5b6000546001600160a01b031661007c565b6100d46100bf3660046100e2565b50604080516020810190915260008152600191565b60405161009092919061018c565b6000602082840312156100f3578081fd5b813567ffffffffffffffff8082111561010a578283fd5b818401915084601f83011261011d578283fd5b81358181111561012f5761012f6101e9565b604051601f8201601f19908116603f01168101908382118183101715610157576101576101e9565b8160405282815287602084870101111561016f578586fd5b826020860160208301379182016020019490945295945050505050565b8215158152600060206040818401528351806040850152825b818110156101c1578581018301518582016060015282016101a5565b818111156101d25783606083870101525b50601f01601f191692909201606001949350505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b735755bc313ad5adccc386d74c91cf9cc887bb4c8449b8ce7efd6f4cb1c7d9464736f6c63430008040033";

export class IEvaFlowTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IEvaFlowTest> {
    return super.deploy(overrides || {}) as Promise<IEvaFlowTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IEvaFlowTest {
    return super.attach(address) as IEvaFlowTest;
  }
  connect(signer: Signer): IEvaFlowTest__factory {
    return super.connect(signer) as IEvaFlowTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IEvaFlowTestInterface {
    return new utils.Interface(_abi) as IEvaFlowTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEvaFlowTest {
    return new Contract(address, _abi, signerOrProvider) as IEvaFlowTest;
  }
}
