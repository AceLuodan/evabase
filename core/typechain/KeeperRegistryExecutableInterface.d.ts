/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KeeperRegistryExecutableInterfaceInterface
  extends ethers.utils.Interface {
  functions: {
    "addFunds(uint256,uint96)": FunctionFragment;
    "cancelUpkeep(uint256)": FunctionFragment;
    "checkUpkeep(uint256,address)": FunctionFragment;
    "getCanceledUpkeepList()": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getKeeperInfo(address)": FunctionFragment;
    "getKeeperList()": FunctionFragment;
    "getUpkeep(uint256)": FunctionFragment;
    "getUpkeepCount()": FunctionFragment;
    "performUpkeep(uint256,bytes)": FunctionFragment;
    "registerUpkeep(address,uint32,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFunds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCanceledUpkeepList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getKeeperInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeeperList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpkeepCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUpkeep",
    values: [string, BigNumberish, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCanceledUpkeepList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeeperInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeeperList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUpkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUpkeepCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUpkeep",
    data: BytesLike
  ): Result;

  events: {};
}

export class KeeperRegistryExecutableInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperRegistryExecutableInterfaceInterface;

  functions: {
    addFunds(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelUpkeep(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      upkeepId: BigNumberish,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCanceledUpkeepList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber, BigNumber] & {
        paymentPremiumPPB: number;
        checkFrequencyBlocks: number;
        checkGasLimit: number;
        stalenessSeconds: number;
        gasCeilingMultiplier: number;
        fallbackGasPrice: BigNumber;
        fallbackLinkPrice: BigNumber;
      }
    >;

    getKeeperInfo(
      query: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        payee: string;
        active: boolean;
        balance: BigNumber;
      }
    >;

    getKeeperList(overrides?: CallOverrides): Promise<[string[]]>;

    getUpkeep(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, string, string, BigNumber] & {
        target: string;
        executeGas: number;
        checkData: string;
        balance: BigNumber;
        lastKeeper: string;
        admin: string;
        maxValidBlocknumber: BigNumber;
      }
    >;

    getUpkeepCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    performUpkeep(
      id: BigNumberish,
      performData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUpkeep(
      target: string,
      gasLimit: BigNumberish,
      admin: string,
      checkData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFunds(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelUpkeep(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    upkeepId: BigNumberish,
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCanceledUpkeepList(overrides?: CallOverrides): Promise<BigNumber[]>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, BigNumber, BigNumber] & {
      paymentPremiumPPB: number;
      checkFrequencyBlocks: number;
      checkGasLimit: number;
      stalenessSeconds: number;
      gasCeilingMultiplier: number;
      fallbackGasPrice: BigNumber;
      fallbackLinkPrice: BigNumber;
    }
  >;

  getKeeperInfo(
    query: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      payee: string;
      active: boolean;
      balance: BigNumber;
    }
  >;

  getKeeperList(overrides?: CallOverrides): Promise<string[]>;

  getUpkeep(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, string, string, BigNumber] & {
      target: string;
      executeGas: number;
      checkData: string;
      balance: BigNumber;
      lastKeeper: string;
      admin: string;
      maxValidBlocknumber: BigNumber;
    }
  >;

  getUpkeepCount(overrides?: CallOverrides): Promise<BigNumber>;

  performUpkeep(
    id: BigNumberish,
    performData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUpkeep(
    target: string,
    gasLimit: BigNumberish,
    admin: string,
    checkData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFunds(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUpkeep(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    checkUpkeep(
      upkeepId: BigNumberish,
      from: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        performData: string;
        maxLinkPayment: BigNumber;
        gasLimit: BigNumber;
        adjustedGasWei: BigNumber;
        linkEth: BigNumber;
      }
    >;

    getCanceledUpkeepList(overrides?: CallOverrides): Promise<BigNumber[]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber, BigNumber] & {
        paymentPremiumPPB: number;
        checkFrequencyBlocks: number;
        checkGasLimit: number;
        stalenessSeconds: number;
        gasCeilingMultiplier: number;
        fallbackGasPrice: BigNumber;
        fallbackLinkPrice: BigNumber;
      }
    >;

    getKeeperInfo(
      query: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        payee: string;
        active: boolean;
        balance: BigNumber;
      }
    >;

    getKeeperList(overrides?: CallOverrides): Promise<string[]>;

    getUpkeep(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, string, string, BigNumber] & {
        target: string;
        executeGas: number;
        checkData: string;
        balance: BigNumber;
        lastKeeper: string;
        admin: string;
        maxValidBlocknumber: BigNumber;
      }
    >;

    getUpkeepCount(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      id: BigNumberish,
      performData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerUpkeep(
      target: string,
      gasLimit: BigNumberish,
      admin: string,
      checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addFunds(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelUpkeep(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      upkeepId: BigNumberish,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCanceledUpkeepList(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getKeeperInfo(query: string, overrides?: CallOverrides): Promise<BigNumber>;

    getKeeperList(overrides?: CallOverrides): Promise<BigNumber>;

    getUpkeep(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getUpkeepCount(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      id: BigNumberish,
      performData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUpkeep(
      target: string,
      gasLimit: BigNumberish,
      admin: string,
      checkData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFunds(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelUpkeep(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      upkeepId: BigNumberish,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCanceledUpkeepList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeeperInfo(
      query: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeeperList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpkeep(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpkeepCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      id: BigNumberish,
      performData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUpkeep(
      target: string,
      gasLimit: BigNumberish,
      admin: string,
      checkData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
