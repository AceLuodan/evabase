/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EvaFlowControlerInterface extends ethers.utils.Interface {
  functions: {
    "MAX_INT()": FunctionFragment;
    "addFundByUser(address,uint256,address)": FunctionFragment;
    "batchExecFlow(bytes,uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "createEvaSafes(address)": FunctionFragment;
    "createFlow(string,uint8,address,bytes,uint256)": FunctionFragment;
    "destroyFlow(uint256,bytes)": FunctionFragment;
    "evaSafesFactory()": FunctionFragment;
    "execFlow(uint256,bytes)": FunctionFragment;
    "flowMetas(uint256)": FunctionFragment;
    "getAllVaildFlowSize(uint8)": FunctionFragment;
    "getFlowMetas(uint256)": FunctionFragment;
    "getIndexVaildFlow(uint256,uint8)": FunctionFragment;
    "getSafes(address)": FunctionFragment;
    "getVaildFlowRange(uint256,uint256,uint8)": FunctionFragment;
    "minConfig()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseFlow(uint256,bytes)": FunctionFragment;
    "paymentEthAmount()": FunctionFragment;
    "paymentGasAmount()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMinConfig((address,address,uint64,uint64,uint16,uint16))": FunctionFragment;
    "startFlow(uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFlow(uint256,string,bytes)": FunctionFragment;
    "userMetaMap(address)": FunctionFragment;
    "withdrawFundByUser(address,uint256)": FunctionFragment;
    "withdrawPayment(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_INT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addFundByUser",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecFlow",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createEvaSafes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlow",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyFlow",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "evaSafesFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execFlow",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flowMetas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVaildFlowSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowMetas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexVaildFlow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSafes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVaildFlowRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minConfig", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseFlow",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentEthAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentGasAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinConfig",
    values: [
      {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumberish;
        minGasFundOneFlow: BigNumberish;
        PPB: BigNumberish;
        blockCountPerTurn: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startFlow",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlow",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "userMetaMap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFundByUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayment",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_INT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFundByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExecFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvaSafes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "destroyFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaSafesFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flowMetas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllVaildFlowSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlowMetas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexVaildFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaildFlowRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentEthAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentGasAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userMetaMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFundByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayment",
    data: BytesLike
  ): Result;

  events: {
    "FlowCreated(address,uint256,address)": EventFragment;
    "FlowDestroyed(address,uint256)": EventFragment;
    "FlowExecuted(address,uint256,bool,uint256,uint256,uint256)": EventFragment;
    "FlowPaused(address,uint256)": EventFragment;
    "FlowStart(address,uint256)": EventFragment;
    "FlowUpdated(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMinConfig(address,address,address,uint64,uint64,uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowDestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinConfig"): EventFragment;
}

export type FlowCreatedEvent = TypedEvent<
  [string, BigNumber, string] & {
    user: string;
    _flowId: BigNumber;
    flowAdd: string;
  }
>;

export type FlowDestroyedEvent = TypedEvent<
  [string, BigNumber] & { user: string; _flowId: BigNumber }
>;

export type FlowExecutedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
    user: string;
    _flowId: BigNumber;
    sucesss: boolean;
    payAmountByETH: BigNumber;
    payAmountByFeeToken: BigNumber;
    gasUsed: BigNumber;
  }
>;

export type FlowPausedEvent = TypedEvent<
  [string, BigNumber] & { user: string; _flowId: BigNumber }
>;

export type FlowStartEvent = TypedEvent<
  [string, BigNumber] & { user: string; _flowId: BigNumber }
>;

export type FlowUpdatedEvent = TypedEvent<
  [string, BigNumber, string] & {
    user: string;
    _flowId: BigNumber;
    flowAdd: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetMinConfigEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number, number] & {
    user: string;
    feeRecived: string;
    feeToken: string;
    minGasFundForUser: BigNumber;
    minGasFundOneFlow: BigNumber;
    PPB: number;
    blockCountPerTurn: number;
  }
>;

export class EvaFlowControler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EvaFlowControlerInterface;

  functions: {
    MAX_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchExecFlow(
      _data: BytesLike,
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[string]>;

    createEvaSafes(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createFlow(
      _flowName: string,
      _keepNetWork: BigNumberish,
      _flowAddress: string,
      _flowCode: BytesLike,
      gasFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    evaSafesFactory(overrides?: CallOverrides): Promise<[string]>;

    execFlow(
      _flowId: BigNumberish,
      _inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flowMetas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        flowStatus: number;
        keepNetWork: number;
        admin: string;
        lastKeeper: string;
        lastVersionflow: string;
        lastExecNumber: BigNumber;
        maxVaildBlockNumber: BigNumber;
        flowName: string;
        checkData: string;
      }
    >;

    getAllVaildFlowSize(
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    getFlowMetas(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          flowStatus: number;
          keepNetWork: number;
          admin: string;
          lastKeeper: string;
          lastVersionflow: string;
          lastExecNumber: BigNumber;
          maxVaildBlockNumber: BigNumber;
          flowName: string;
          checkData: string;
        }
      ]
    >;

    getIndexVaildFlow(
      _index: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    getSafes(user: string, overrides?: CallOverrides): Promise<[string]>;

    getVaildFlowRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { arr: BigNumber[] }>;

    minConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, number, number] & {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumber;
        minGasFundOneFlow: BigNumber;
        PPB: number;
        blockCountPerTurn: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paymentEthAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    paymentGasAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinConfig(
      _minConfig: {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumberish;
        minGasFundOneFlow: BigNumberish;
        PPB: BigNumberish;
        blockCountPerTurn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFlow(
      _flowId: BigNumberish,
      _flowName: string,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userMetaMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        ethBal: BigNumber;
        gasTokenBal: BigNumber;
        vaildFlowsNum: number;
      }
    >;

    withdrawFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPayment(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

  addFundByUser(
    tokenAdress: string,
    amount: BigNumberish,
    user: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchExecFlow(
    _data: BytesLike,
    gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  createEvaSafes(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createFlow(
    _flowName: string,
    _keepNetWork: BigNumberish,
    _flowAddress: string,
    _flowCode: BytesLike,
    gasFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyFlow(
    _flowId: BigNumberish,
    _flowCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  evaSafesFactory(overrides?: CallOverrides): Promise<string>;

  execFlow(
    _flowId: BigNumberish,
    _inputData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flowMetas(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      flowStatus: number;
      keepNetWork: number;
      admin: string;
      lastKeeper: string;
      lastVersionflow: string;
      lastExecNumber: BigNumber;
      maxVaildBlockNumber: BigNumber;
      flowName: string;
      checkData: string;
    }
  >;

  getAllVaildFlowSize(
    _keepNetWork: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFlowMetas(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      flowStatus: number;
      keepNetWork: number;
      admin: string;
      lastKeeper: string;
      lastVersionflow: string;
      lastExecNumber: BigNumber;
      maxVaildBlockNumber: BigNumber;
      flowName: string;
      checkData: string;
    }
  >;

  getIndexVaildFlow(
    _index: BigNumberish,
    _keepNetWork: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSafes(user: string, overrides?: CallOverrides): Promise<string>;

  getVaildFlowRange(
    fromIndex: BigNumberish,
    endIndex: BigNumberish,
    _keepNetWork: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  minConfig(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, number, number] & {
      feeRecived: string;
      feeToken: string;
      minGasFundForUser: BigNumber;
      minGasFundOneFlow: BigNumber;
      PPB: number;
      blockCountPerTurn: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseFlow(
    _flowId: BigNumberish,
    _flowCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paymentEthAmount(overrides?: CallOverrides): Promise<BigNumber>;

  paymentGasAmount(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinConfig(
    _minConfig: {
      feeRecived: string;
      feeToken: string;
      minGasFundForUser: BigNumberish;
      minGasFundOneFlow: BigNumberish;
      PPB: BigNumberish;
      blockCountPerTurn: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startFlow(
    _flowId: BigNumberish,
    _flowCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFlow(
    _flowId: BigNumberish,
    _flowName: string,
    _flowCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userMetaMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      ethBal: BigNumber;
      gasTokenBal: BigNumber;
      vaildFlowsNum: number;
    }
  >;

  withdrawFundByUser(
    tokenAdress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPayment(
    tokenAdress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    addFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchExecFlow(
      _data: BytesLike,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    createEvaSafes(user: string, overrides?: CallOverrides): Promise<void>;

    createFlow(
      _flowName: string,
      _keepNetWork: BigNumberish,
      _flowAddress: string,
      _flowCode: BytesLike,
      gasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { flowid: BigNumber; add: string }>;

    destroyFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    evaSafesFactory(overrides?: CallOverrides): Promise<string>;

    execFlow(
      _flowId: BigNumberish,
      _inputData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    flowMetas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        flowStatus: number;
        keepNetWork: number;
        admin: string;
        lastKeeper: string;
        lastVersionflow: string;
        lastExecNumber: BigNumber;
        maxVaildBlockNumber: BigNumber;
        flowName: string;
        checkData: string;
      }
    >;

    getAllVaildFlowSize(
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlowMetas(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        flowStatus: number;
        keepNetWork: number;
        admin: string;
        lastKeeper: string;
        lastVersionflow: string;
        lastExecNumber: BigNumber;
        maxVaildBlockNumber: BigNumber;
        flowName: string;
        checkData: string;
      }
    >;

    getIndexVaildFlow(
      _index: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSafes(user: string, overrides?: CallOverrides): Promise<string>;

    getVaildFlowRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    minConfig(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, number, number] & {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumber;
        minGasFundOneFlow: BigNumber;
        PPB: number;
        blockCountPerTurn: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentEthAmount(overrides?: CallOverrides): Promise<BigNumber>;

    paymentGasAmount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMinConfig(
      _minConfig: {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumberish;
        minGasFundOneFlow: BigNumberish;
        PPB: BigNumberish;
        blockCountPerTurn: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    startFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlow(
      _flowId: BigNumberish,
      _flowName: string,
      _flowCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userMetaMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        ethBal: BigNumber;
        gasTokenBal: BigNumber;
        vaildFlowsNum: number;
      }
    >;

    withdrawFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayment(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FlowCreated(address,uint256,address)"(
      user?: string | null,
      _flowId?: BigNumberish | null,
      flowAdd?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { user: string; _flowId: BigNumber; flowAdd: string }
    >;

    FlowCreated(
      user?: string | null,
      _flowId?: BigNumberish | null,
      flowAdd?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { user: string; _flowId: BigNumber; flowAdd: string }
    >;

    "FlowDestroyed(address,uint256)"(
      user?: string | null,
      _flowId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; _flowId: BigNumber }
    >;

    FlowDestroyed(
      user?: string | null,
      _flowId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; _flowId: BigNumber }
    >;

    "FlowExecuted(address,uint256,bool,uint256,uint256,uint256)"(
      user?: string | null,
      _flowId?: null,
      sucesss?: null,
      payAmountByETH?: null,
      payAmountByFeeToken?: null,
      gasUsed?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        _flowId: BigNumber;
        sucesss: boolean;
        payAmountByETH: BigNumber;
        payAmountByFeeToken: BigNumber;
        gasUsed: BigNumber;
      }
    >;

    FlowExecuted(
      user?: string | null,
      _flowId?: null,
      sucesss?: null,
      payAmountByETH?: null,
      payAmountByFeeToken?: null,
      gasUsed?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        _flowId: BigNumber;
        sucesss: boolean;
        payAmountByETH: BigNumber;
        payAmountByFeeToken: BigNumber;
        gasUsed: BigNumber;
      }
    >;

    "FlowPaused(address,uint256)"(
      user?: string | null,
      _flowId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; _flowId: BigNumber }
    >;

    FlowPaused(
      user?: string | null,
      _flowId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; _flowId: BigNumber }
    >;

    "FlowStart(address,uint256)"(
      user?: string | null,
      _flowId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; _flowId: BigNumber }
    >;

    FlowStart(
      user?: string | null,
      _flowId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; _flowId: BigNumber }
    >;

    "FlowUpdated(address,uint256,address)"(
      user?: string | null,
      _flowId?: null,
      flowAdd?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { user: string; _flowId: BigNumber; flowAdd: string }
    >;

    FlowUpdated(
      user?: string | null,
      _flowId?: null,
      flowAdd?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { user: string; _flowId: BigNumber; flowAdd: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetMinConfig(address,address,address,uint64,uint64,uint16,uint16)"(
      user?: string | null,
      feeRecived?: null,
      feeToken?: null,
      minGasFundForUser?: null,
      minGasFundOneFlow?: null,
      PPB?: null,
      blockCountPerTurn?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, number, number],
      {
        user: string;
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumber;
        minGasFundOneFlow: BigNumber;
        PPB: number;
        blockCountPerTurn: number;
      }
    >;

    SetMinConfig(
      user?: string | null,
      feeRecived?: null,
      feeToken?: null,
      minGasFundForUser?: null,
      minGasFundOneFlow?: null,
      PPB?: null,
      blockCountPerTurn?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, number, number],
      {
        user: string;
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumber;
        minGasFundOneFlow: BigNumber;
        PPB: number;
        blockCountPerTurn: number;
      }
    >;
  };

  estimateGas: {
    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    addFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchExecFlow(
      _data: BytesLike,
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    createEvaSafes(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createFlow(
      _flowName: string,
      _keepNetWork: BigNumberish,
      _flowAddress: string,
      _flowCode: BytesLike,
      gasFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    evaSafesFactory(overrides?: CallOverrides): Promise<BigNumber>;

    execFlow(
      _flowId: BigNumberish,
      _inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flowMetas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllVaildFlowSize(
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlowMetas(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexVaildFlow(
      _index: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSafes(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVaildFlowRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minConfig(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paymentEthAmount(overrides?: CallOverrides): Promise<BigNumber>;

    paymentGasAmount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinConfig(
      _minConfig: {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumberish;
        minGasFundOneFlow: BigNumberish;
        PPB: BigNumberish;
        blockCountPerTurn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFlow(
      _flowId: BigNumberish,
      _flowName: string,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userMetaMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPayment(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchExecFlow(
      _data: BytesLike,
      gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createEvaSafes(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createFlow(
      _flowName: string,
      _keepNetWork: BigNumberish,
      _flowAddress: string,
      _flowCode: BytesLike,
      gasFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    evaSafesFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execFlow(
      _flowId: BigNumberish,
      _inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flowMetas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllVaildFlowSize(
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlowMetas(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexVaildFlow(
      _index: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSafes(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaildFlowRange(
      fromIndex: BigNumberish,
      endIndex: BigNumberish,
      _keepNetWork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paymentEthAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentGasAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinConfig(
      _minConfig: {
        feeRecived: string;
        feeToken: string;
        minGasFundForUser: BigNumberish;
        minGasFundOneFlow: BigNumberish;
        PPB: BigNumberish;
        blockCountPerTurn: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startFlow(
      _flowId: BigNumberish,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFlow(
      _flowId: BigNumberish,
      _flowName: string,
      _flowCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userMetaMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFundByUser(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayment(
      tokenAdress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
